name: build-deploy

on:
  push:
    branches: [ "*" ]
  create:
    tags: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifacts: ${{ steps.building.outputs.artifacts }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          show-progress: true
      - name: Setup Go 1.22.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Display Go version
        run: go version
      - name: download dependencies
        run: go mod download
      - name: build binary
        id: building
        run: |
          go build -v -x -o "${{ github.workspace }}/artifacts/run" "./cmd/ai/main/main.go"
          echo "artifacts=${{ github.workspace }}/artifacts" >> "$GITHUB_OUTPUT"
      - name: cache artifacts
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/artifacts
          key: artifacts-${{ github.sha }}
  pause:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: stop service if running
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 165.22.92.220
          username: root
          password: 1234Test
          script: |
            service_status=$(pm2 jlist|jq '.[]|select(. | contains({name: "${{ format('{0}-{1}', vars.SERVICE, github.ref_name) }}"})).pm2_env.status')
            if [[ "$service_status" == "\"online\"" ]]; then pm2 stop ${{ format('{0}-{1}', vars.SERVICE, github.ref_name) }}; fi
  upload_artifacts:
    permissions: write-all
    uses: ./.github/workflows/upload.yml
    needs: [ build, pause ]
    with:
      path: ${{ needs.build.outputs.artifacts }}
      key: artifacts-${{ github.sha }}
      strip_components: 3
  helm:
    runs-on: ubuntu-latest
    outputs:
      config: ${{ steps.moving.outputs.config }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            cloud
          sparse-checkout-cone-mode: false
          show-progress: true
      - uses: azure/setup-helm@v4.2.0
      - name: Linting
        run: helm lint cloud
      - name: Templating
        run: |
          helm template cloud --output-dir cloud/rendered \
            --set name=${{ format('{0}-{1}', vars.SERVICE, github.ref_name) }} \
            --set script="/root/${{ vars.SERVICE }}/${{ github.ref_name }}/run" \
            --set cwd="/root/${{ vars.SERVICE }}/${{ github.ref_name }}" \
            --set env.TOKEN=${{ github.ref_type == 'tag' && vars.LUNA_TOKEN || vars.LUNA_BETA_TOKEN }} \
            --set env.NEO4J_DATABASE_URL=${{ vars.NEO4J_DATABASE_URL }} \
            --set env.NEO4J_DATABASE_USER=${{ vars.NEO4J_DATABASE_USER }} \
            --set env.NEO4J_DATABASE_PASSWORD=${{ vars.NEO4J_DATABASE_PASSWORD }} \
            --set env.CLIENT_ID=${{ vars.CLIENT_ID }} \
            --set env.CLIENT_SECRET=${{ vars.CLIENT_SECRET }} \
            --set env.DEEPGRAM_API_KEY=${{ vars.DEEPGRAM_API_KEY }} \
            --set env.ELVENLABS_API_KEY=${{ vars.ELVENLABS_API_KEY }} \
            --set env.COHERE_INST=${{ vars.COHERE_INST }} \
            --set env.ARCHIVE_CRON=${{ vars.ARCHIVE_CRON }}
      - name: Moving
        id: moving
        run: |
          mkdir --parents ${{ github.workspace }}/config; mv cloud/rendered/cloud/templates/pm2.yaml $_
          echo "config=${{ github.workspace }}/config" >> "$GITHUB_OUTPUT"

      - name: cache config
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/config
          key: config-${{ github.sha }}
  upload_config:
    permissions: write-all
    uses: ./.github/workflows/upload.yml
    needs: [ helm ]
    with:
      path: ${{ needs.helm.outputs.config }}
      key: config-${{ github.sha }}
      strip_components: 3
  call_deploy:
    uses: ./.github/workflows/deploy.yml
    needs: [ upload_config, upload_artifacts ]
    with:
#      cleanup: ${{ github.ref_type != 'tag' }}
      cleanup: false


#      gh cache delete <CACHE_ID>