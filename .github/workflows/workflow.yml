name: build-deploy

on:
  push:
    branches: [ "*" ]
  create:
    tags: [ "*" ]

jobs:
  docker-build-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          show-progress: true
      - name: Setup Go 1.22.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
      - name: Display Go version
        run: go version
      - name: download dependencies
        run: go mod -v -x download
      - name: build binary
        run: go build -v -x -o "./bin/run" "./cmd/ai/main/main.go"
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: "run-${{ github.ref_name }}"
          path: ${{ github.workspace }}/bin/run
          retention-days: 7
          if-no-files-found: error
      - name: scp binary to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 165.22.92.220
          username: root
          password: 1234Test
          source: ${{ github.workspace }}/bin/run
          target: /root/${{ vars.SERVICE }}/${{ github.ref_name }}

  helm:
    runs-on: ubuntu-latest
    container: alpine/helm:3.15.2
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            cloud
          sparse-checkout-cone-mode: false
          show-progress: true
      - name: Linting
        run: helm lint cloud
      - name: Templating
        run: |
          helm template cloud --output-dir cloud/rendered \
            --set name=${{ format('{0}-{1}', vars.SERVICE, github.ref_name) }} \
            --set cwd=${{ format('{0}-{1}', vars.SERVICE, github.ref_name) }} \
            --set env.TOKEN=${{ github.ref_type == 'tag' && vars.LUNA_TOKEN || vars.LUNA_BETA_TOKEN }} \
            --set env.NEO4J_DATABASE_URL=${{ vars.NEO4J_DATABASE_URL }} \
            --set env.NEO4J_DATABASE_USER=${{ vars.NEO4J_DATABASE_USER }} \
            --set env.NEO4J_DATABASE_PASSWORD=${{ vars.NEO4J_DATABASE_PASSWORD }} \
            --set env.CLIENT_ID=${{ vars.CLIENT_ID }} \
            --set env.CLIENT_SECRET=${{ vars.CLIENT_SECRET }} \
            --set env.DEEPGRAM_API_KEY=${{ vars.DEEPGRAM_API_KEY }} \
            --set env.ELVENLABS_API_KEY=${{ vars.ELVENLABS_API_KEY }} \
      - name: scp binary to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 165.22.92.220
          username: root
          password: 1234Test
          source: ${{ github.workspace }}/cloud/rendered/cloud/templates/pm2.yaml
          target: /root/${{ vars.SERVICE }}/${{ github.ref_name }}
  deploy:
    runs-on: ubuntu-latest
    needs: [ docker-build-upload, helm ]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: pm2 start pm2.yaml file in the server
        run: something something
  cleanup:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    needs: [ deploy ]
    if: github.ref_type != 'tag'
    steps:
      - name: pm2 stop service
        run: something something
      - name: delete files
        run: rm -rf something something


